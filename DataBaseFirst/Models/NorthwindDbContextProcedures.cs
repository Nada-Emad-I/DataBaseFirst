// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using DataBaseFirst.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace DataBaseFirst.Models
{
    public partial class NorthwindDbContext
    {
        private INorthwindDbContextProcedures _procedures;

        public virtual INorthwindDbContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new NorthwindDbContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public INorthwindDbContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class NorthwindDbContextProcedures : INorthwindDbContextProcedures
    {
        private readonly NorthwindDbContext _context;

        public NorthwindDbContextProcedures(NorthwindDbContext context)
        {
            _context = context;
        }

        public virtual async Task<List<CustOrderHistResult>> CustOrderHistAsync(string customerID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 10,
                    Value = customerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<CustOrderHistResult>("EXEC @returnValue = [dbo].[CustOrderHist] @CustomerID = @CustomerID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CustOrdersDetailResult>> CustOrdersDetailAsync(int? orderID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "OrderID",
                    Value = orderID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<CustOrdersDetailResult>("EXEC @returnValue = [dbo].[CustOrdersDetail] @OrderID = @OrderID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CustOrdersOrdersResult>> CustOrdersOrdersAsync(string customerID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 10,
                    Value = customerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<CustOrdersOrdersResult>("EXEC @returnValue = [dbo].[CustOrdersOrders] @CustomerID = @CustomerID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteCategoryByCategoryIDAsync(int? categoryID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CategoryID",
                    Value = categoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteCategoryByCategoryID] @CategoryID = @CategoryID", sqlParameters, cancellationToken ?? CancellationToken.None);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteEmployeeByIDAsync(int? employeeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EmployeeID",
                    Value = employeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteEmployeeByID] @EmployeeID = @EmployeeID", sqlParameters, cancellationToken ?? CancellationToken.None);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteProductByIDAsync(int? productId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProductId",
                    Value = productId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteProductByID] @ProductId = @ProductId", sqlParameters, cancellationToken ?? CancellationToken.None);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DiscontinuedProductsResult>> DiscontinuedProductsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<DiscontinuedProductsResult>("EXEC @returnValue = [dbo].[DiscontinuedProducts]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<EmployeeSalesbyCountryResult>> EmployeeSalesbyCountryAsync(DateTime? beginning_Date, DateTime? ending_Date, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Beginning_Date",
                    Value = beginning_Date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Ending_Date",
                    Value = ending_Date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<EmployeeSalesbyCountryResult>("EXEC @returnValue = [dbo].[Employee Sales by Country] @Beginning_Date = @Beginning_Date, @Ending_Date = @Ending_Date", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> NewProductDeleteCommandAsync(int? original_ProductID, string original_ProductName, int? isNull_SupplierID, int? original_SupplierID, int? isNull_CategoryID, int? original_CategoryID, int? isNull_QuantityPerUnit, string original_QuantityPerUnit, int? isNull_UnitPrice, decimal? original_UnitPrice, int? isNull_UnitsInStock, short? original_UnitsInStock, int? isNull_UnitsOnOrder, short? original_UnitsOnOrder, int? isNull_ReorderLevel, short? original_ReorderLevel, bool? original_Discontinued, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Original_ProductID",
                    Value = original_ProductID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_ProductName",
                    Size = 80,
                    Value = original_ProductName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_SupplierID",
                    Value = isNull_SupplierID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_SupplierID",
                    Value = original_SupplierID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_CategoryID",
                    Value = isNull_CategoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_CategoryID",
                    Value = original_CategoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_QuantityPerUnit",
                    Value = isNull_QuantityPerUnit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_QuantityPerUnit",
                    Size = 40,
                    Value = original_QuantityPerUnit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_UnitPrice",
                    Value = isNull_UnitPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_UnitPrice",
                    Precision = 19,
                    Scale = 4,
                    Value = original_UnitPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_UnitsInStock",
                    Value = isNull_UnitsInStock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_UnitsInStock",
                    Value = original_UnitsInStock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_UnitsOnOrder",
                    Value = isNull_UnitsOnOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_UnitsOnOrder",
                    Value = original_UnitsOnOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_ReorderLevel",
                    Value = isNull_ReorderLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_ReorderLevel",
                    Value = original_ReorderLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Original_Discontinued",
                    Value = original_Discontinued ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[NewProductDeleteCommand] @Original_ProductID = @Original_ProductID, @Original_ProductName = @Original_ProductName, @IsNull_SupplierID = @IsNull_SupplierID, @Original_SupplierID = @Original_SupplierID, @IsNull_CategoryID = @IsNull_CategoryID, @Original_CategoryID = @Original_CategoryID, @IsNull_QuantityPerUnit = @IsNull_QuantityPerUnit, @Original_QuantityPerUnit = @Original_QuantityPerUnit, @IsNull_UnitPrice = @IsNull_UnitPrice, @Original_UnitPrice = @Original_UnitPrice, @IsNull_UnitsInStock = @IsNull_UnitsInStock, @Original_UnitsInStock = @Original_UnitsInStock, @IsNull_UnitsOnOrder = @IsNull_UnitsOnOrder, @Original_UnitsOnOrder = @Original_UnitsOnOrder, @IsNull_ReorderLevel = @IsNull_ReorderLevel, @Original_ReorderLevel = @Original_ReorderLevel, @Original_Discontinued = @Original_Discontinued", sqlParameters, cancellationToken ?? CancellationToken.None);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NewProductInsertCommandResult>> NewProductInsertCommandAsync(string productName, int? supplierID, int? categoryID, string quantityPerUnit, decimal? unitPrice, short? unitsInStock, short? unitsOnOrder, short? reorderLevel, bool? discontinued, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProductName",
                    Size = 80,
                    Value = productName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplierID",
                    Value = supplierID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CategoryID",
                    Value = categoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "QuantityPerUnit",
                    Size = 40,
                    Value = quantityPerUnit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UnitPrice",
                    Precision = 19,
                    Scale = 4,
                    Value = unitPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "UnitsInStock",
                    Value = unitsInStock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "UnitsOnOrder",
                    Value = unitsOnOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReorderLevel",
                    Value = reorderLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Discontinued",
                    Value = discontinued ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<NewProductInsertCommandResult>("EXEC @returnValue = [dbo].[NewProductInsertCommand] @ProductName = @ProductName, @SupplierID = @SupplierID, @CategoryID = @CategoryID, @QuantityPerUnit = @QuantityPerUnit, @UnitPrice = @UnitPrice, @UnitsInStock = @UnitsInStock, @UnitsOnOrder = @UnitsOnOrder, @ReorderLevel = @ReorderLevel, @Discontinued = @Discontinued", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NewProductSelectCommandResult>> NewProductSelectCommandAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<NewProductSelectCommandResult>("EXEC @returnValue = [dbo].[NewProductSelectCommand]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NewProductUpdateCommandResult>> NewProductUpdateCommandAsync(string productName, int? supplierID, int? categoryID, string quantityPerUnit, decimal? unitPrice, short? unitsInStock, short? unitsOnOrder, short? reorderLevel, bool? discontinued, int? original_ProductID, string original_ProductName, int? isNull_SupplierID, int? original_SupplierID, int? isNull_CategoryID, int? original_CategoryID, int? isNull_QuantityPerUnit, string original_QuantityPerUnit, int? isNull_UnitPrice, decimal? original_UnitPrice, int? isNull_UnitsInStock, short? original_UnitsInStock, int? isNull_UnitsOnOrder, short? original_UnitsOnOrder, int? isNull_ReorderLevel, short? original_ReorderLevel, bool? original_Discontinued, int? productID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProductName",
                    Size = 80,
                    Value = productName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplierID",
                    Value = supplierID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CategoryID",
                    Value = categoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "QuantityPerUnit",
                    Size = 40,
                    Value = quantityPerUnit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UnitPrice",
                    Precision = 19,
                    Scale = 4,
                    Value = unitPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "UnitsInStock",
                    Value = unitsInStock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "UnitsOnOrder",
                    Value = unitsOnOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReorderLevel",
                    Value = reorderLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Discontinued",
                    Value = discontinued ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Original_ProductID",
                    Value = original_ProductID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_ProductName",
                    Size = 80,
                    Value = original_ProductName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_SupplierID",
                    Value = isNull_SupplierID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_SupplierID",
                    Value = original_SupplierID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_CategoryID",
                    Value = isNull_CategoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_CategoryID",
                    Value = original_CategoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_QuantityPerUnit",
                    Value = isNull_QuantityPerUnit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_QuantityPerUnit",
                    Size = 40,
                    Value = original_QuantityPerUnit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_UnitPrice",
                    Value = isNull_UnitPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_UnitPrice",
                    Precision = 19,
                    Scale = 4,
                    Value = original_UnitPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_UnitsInStock",
                    Value = isNull_UnitsInStock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_UnitsInStock",
                    Value = original_UnitsInStock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_UnitsOnOrder",
                    Value = isNull_UnitsOnOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_UnitsOnOrder",
                    Value = original_UnitsOnOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_ReorderLevel",
                    Value = isNull_ReorderLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_ReorderLevel",
                    Value = original_ReorderLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Original_Discontinued",
                    Value = original_Discontinued ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "ProductID",
                    Value = productID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<NewProductUpdateCommandResult>("EXEC @returnValue = [dbo].[NewProductUpdateCommand] @ProductName = @ProductName, @SupplierID = @SupplierID, @CategoryID = @CategoryID, @QuantityPerUnit = @QuantityPerUnit, @UnitPrice = @UnitPrice, @UnitsInStock = @UnitsInStock, @UnitsOnOrder = @UnitsOnOrder, @ReorderLevel = @ReorderLevel, @Discontinued = @Discontinued, @Original_ProductID = @Original_ProductID, @Original_ProductName = @Original_ProductName, @IsNull_SupplierID = @IsNull_SupplierID, @Original_SupplierID = @Original_SupplierID, @IsNull_CategoryID = @IsNull_CategoryID, @Original_CategoryID = @Original_CategoryID, @IsNull_QuantityPerUnit = @IsNull_QuantityPerUnit, @Original_QuantityPerUnit = @Original_QuantityPerUnit, @IsNull_UnitPrice = @IsNull_UnitPrice, @Original_UnitPrice = @Original_UnitPrice, @IsNull_UnitsInStock = @IsNull_UnitsInStock, @Original_UnitsInStock = @Original_UnitsInStock, @IsNull_UnitsOnOrder = @IsNull_UnitsOnOrder, @Original_UnitsOnOrder = @Original_UnitsOnOrder, @IsNull_ReorderLevel = @IsNull_ReorderLevel, @Original_ReorderLevel = @Original_ReorderLevel, @Original_Discontinued = @Original_Discontinued, @ProductID = @ProductID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> PrdsDeleteCommandAsync(int? original_ProductID, string original_ProductName, int? isNull_SupplierID, int? original_SupplierID, int? isNull_CategoryID, int? original_CategoryID, int? isNull_QuantityPerUnit, string original_QuantityPerUnit, int? isNull_UnitPrice, decimal? original_UnitPrice, int? isNull_UnitsInStock, short? original_UnitsInStock, int? isNull_UnitsOnOrder, short? original_UnitsOnOrder, int? isNull_ReorderLevel, short? original_ReorderLevel, bool? original_Discontinued, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Original_ProductID",
                    Value = original_ProductID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_ProductName",
                    Size = 80,
                    Value = original_ProductName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_SupplierID",
                    Value = isNull_SupplierID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_SupplierID",
                    Value = original_SupplierID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_CategoryID",
                    Value = isNull_CategoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_CategoryID",
                    Value = original_CategoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_QuantityPerUnit",
                    Value = isNull_QuantityPerUnit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_QuantityPerUnit",
                    Size = 40,
                    Value = original_QuantityPerUnit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_UnitPrice",
                    Value = isNull_UnitPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_UnitPrice",
                    Precision = 19,
                    Scale = 4,
                    Value = original_UnitPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_UnitsInStock",
                    Value = isNull_UnitsInStock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_UnitsInStock",
                    Value = original_UnitsInStock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_UnitsOnOrder",
                    Value = isNull_UnitsOnOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_UnitsOnOrder",
                    Value = original_UnitsOnOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_ReorderLevel",
                    Value = isNull_ReorderLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_ReorderLevel",
                    Value = original_ReorderLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Original_Discontinued",
                    Value = original_Discontinued ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PrdsDeleteCommand] @Original_ProductID = @Original_ProductID, @Original_ProductName = @Original_ProductName, @IsNull_SupplierID = @IsNull_SupplierID, @Original_SupplierID = @Original_SupplierID, @IsNull_CategoryID = @IsNull_CategoryID, @Original_CategoryID = @Original_CategoryID, @IsNull_QuantityPerUnit = @IsNull_QuantityPerUnit, @Original_QuantityPerUnit = @Original_QuantityPerUnit, @IsNull_UnitPrice = @IsNull_UnitPrice, @Original_UnitPrice = @Original_UnitPrice, @IsNull_UnitsInStock = @IsNull_UnitsInStock, @Original_UnitsInStock = @Original_UnitsInStock, @IsNull_UnitsOnOrder = @IsNull_UnitsOnOrder, @Original_UnitsOnOrder = @Original_UnitsOnOrder, @IsNull_ReorderLevel = @IsNull_ReorderLevel, @Original_ReorderLevel = @Original_ReorderLevel, @Original_Discontinued = @Original_Discontinued", sqlParameters, cancellationToken ?? CancellationToken.None);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PrdsInsertCommandResult>> PrdsInsertCommandAsync(string productName, int? supplierID, int? categoryID, string quantityPerUnit, decimal? unitPrice, short? unitsInStock, short? unitsOnOrder, short? reorderLevel, bool? discontinued, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProductName",
                    Size = 80,
                    Value = productName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplierID",
                    Value = supplierID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CategoryID",
                    Value = categoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "QuantityPerUnit",
                    Size = 40,
                    Value = quantityPerUnit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UnitPrice",
                    Precision = 19,
                    Scale = 4,
                    Value = unitPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "UnitsInStock",
                    Value = unitsInStock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "UnitsOnOrder",
                    Value = unitsOnOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReorderLevel",
                    Value = reorderLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Discontinued",
                    Value = discontinued ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<PrdsInsertCommandResult>("EXEC @returnValue = [dbo].[PrdsInsertCommand] @ProductName = @ProductName, @SupplierID = @SupplierID, @CategoryID = @CategoryID, @QuantityPerUnit = @QuantityPerUnit, @UnitPrice = @UnitPrice, @UnitsInStock = @UnitsInStock, @UnitsOnOrder = @UnitsOnOrder, @ReorderLevel = @ReorderLevel, @Discontinued = @Discontinued", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PrdsSelectCommandResult>> PrdsSelectCommandAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<PrdsSelectCommandResult>("EXEC @returnValue = [dbo].[PrdsSelectCommand]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PrdsUpdateCommandResult>> PrdsUpdateCommandAsync(string productName, int? supplierID, int? categoryID, string quantityPerUnit, decimal? unitPrice, short? unitsInStock, short? unitsOnOrder, short? reorderLevel, bool? discontinued, int? original_ProductID, string original_ProductName, int? isNull_SupplierID, int? original_SupplierID, int? isNull_CategoryID, int? original_CategoryID, int? isNull_QuantityPerUnit, string original_QuantityPerUnit, int? isNull_UnitPrice, decimal? original_UnitPrice, int? isNull_UnitsInStock, short? original_UnitsInStock, int? isNull_UnitsOnOrder, short? original_UnitsOnOrder, int? isNull_ReorderLevel, short? original_ReorderLevel, bool? original_Discontinued, int? productID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProductName",
                    Size = 80,
                    Value = productName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplierID",
                    Value = supplierID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CategoryID",
                    Value = categoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "QuantityPerUnit",
                    Size = 40,
                    Value = quantityPerUnit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UnitPrice",
                    Precision = 19,
                    Scale = 4,
                    Value = unitPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "UnitsInStock",
                    Value = unitsInStock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "UnitsOnOrder",
                    Value = unitsOnOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReorderLevel",
                    Value = reorderLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Discontinued",
                    Value = discontinued ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Original_ProductID",
                    Value = original_ProductID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_ProductName",
                    Size = 80,
                    Value = original_ProductName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_SupplierID",
                    Value = isNull_SupplierID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_SupplierID",
                    Value = original_SupplierID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_CategoryID",
                    Value = isNull_CategoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_CategoryID",
                    Value = original_CategoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_QuantityPerUnit",
                    Value = isNull_QuantityPerUnit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_QuantityPerUnit",
                    Size = 40,
                    Value = original_QuantityPerUnit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_UnitPrice",
                    Value = isNull_UnitPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_UnitPrice",
                    Precision = 19,
                    Scale = 4,
                    Value = original_UnitPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_UnitsInStock",
                    Value = isNull_UnitsInStock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_UnitsInStock",
                    Value = original_UnitsInStock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_UnitsOnOrder",
                    Value = isNull_UnitsOnOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_UnitsOnOrder",
                    Value = original_UnitsOnOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_ReorderLevel",
                    Value = isNull_ReorderLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_ReorderLevel",
                    Value = original_ReorderLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Original_Discontinued",
                    Value = original_Discontinued ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "ProductID",
                    Value = productID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<PrdsUpdateCommandResult>("EXEC @returnValue = [dbo].[PrdsUpdateCommand] @ProductName = @ProductName, @SupplierID = @SupplierID, @CategoryID = @CategoryID, @QuantityPerUnit = @QuantityPerUnit, @UnitPrice = @UnitPrice, @UnitsInStock = @UnitsInStock, @UnitsOnOrder = @UnitsOnOrder, @ReorderLevel = @ReorderLevel, @Discontinued = @Discontinued, @Original_ProductID = @Original_ProductID, @Original_ProductName = @Original_ProductName, @IsNull_SupplierID = @IsNull_SupplierID, @Original_SupplierID = @Original_SupplierID, @IsNull_CategoryID = @IsNull_CategoryID, @Original_CategoryID = @Original_CategoryID, @IsNull_QuantityPerUnit = @IsNull_QuantityPerUnit, @Original_QuantityPerUnit = @Original_QuantityPerUnit, @IsNull_UnitPrice = @IsNull_UnitPrice, @Original_UnitPrice = @Original_UnitPrice, @IsNull_UnitsInStock = @IsNull_UnitsInStock, @Original_UnitsInStock = @Original_UnitsInStock, @IsNull_UnitsOnOrder = @IsNull_UnitsOnOrder, @Original_UnitsOnOrder = @Original_UnitsOnOrder, @IsNull_ReorderLevel = @IsNull_ReorderLevel, @Original_ReorderLevel = @Original_ReorderLevel, @Original_Discontinued = @Original_Discontinued, @ProductID = @ProductID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SalesbyYearResult>> SalesbyYearAsync(DateTime? beginning_Date, DateTime? ending_Date, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Beginning_Date",
                    Value = beginning_Date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Ending_Date",
                    Value = ending_Date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<SalesbyYearResult>("EXEC @returnValue = [dbo].[Sales by Year] @Beginning_Date = @Beginning_Date, @Ending_Date = @Ending_Date", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SalesByCategoryResult>> SalesByCategoryAsync(string categoryName, string ordYear, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CategoryName",
                    Size = 30,
                    Value = categoryName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrdYear",
                    Size = 8,
                    Value = ordYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<SalesByCategoryResult>("EXEC @returnValue = [dbo].[SalesByCategory] @CategoryName = @CategoryName, @OrdYear = @OrdYear", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SelectAllCategoriesResult>> SelectAllCategoriesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<SelectAllCategoriesResult>("EXEC @returnValue = [dbo].[SelectAllCategories]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SelectALLEmployeesResult>> SelectALLEmployeesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<SelectALLEmployeesResult>("EXEC @returnValue = [dbo].[SelectALLEmployees]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SelectAllProductsResult>> SelectAllProductsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<SelectAllProductsResult>("EXEC @returnValue = [dbo].[SelectAllProducts]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TenMostExpensiveProductsResult>> TenMostExpensiveProductsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<TenMostExpensiveProductsResult>("EXEC @returnValue = [dbo].[Ten Most Expensive Products]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TestPrdResult>> TestPrdAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<TestPrdResult>("EXEC @returnValue = [dbo].[TestPrd]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UpdateProductNameByProductIDAsync(int? productID, string productName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProductID",
                    Value = productID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProductName",
                    Size = 80,
                    Value = productName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UpdateProductNameByProductID] @ProductID = @ProductID, @ProductName = @ProductName", sqlParameters, cancellationToken ?? CancellationToken.None);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
